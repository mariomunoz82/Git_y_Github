GIT BASH

gitk para abrir un entorno grafico de la consola

git config --list Este comando muestra la lista de todas las configuraciones de Git.

/*** Limpiar la consolla
clear  

/*** Visualizar el directorio en que nos encontramos
pwd
ls -l para ver el contenido del directorio

/**crear un archivo
touch hola.txtt

/*** visualizar un archivo 

cat hola .txt

*** Ver los comandos utilizados
history

/*** Repetir un comando (se coloca el codigo del comando con un signo !)
!343

/** Borrar un archivo totalmente del repositorio
git rm <archivo>, se utiliza para eliminar un archivo tanto del repositorio Git como del directorio de trabajo

/** Para deshacer el add . y ya no guardar los cambios
git rm --cached prueba.txt Quita el archivo del área de staging y detiene su rastreo por parte de Git a menos que lo añadas de nuevo (explicitamente o con add .) mantiene el archivo en el directorio de trabajo.

code prueba.txt (nos abre el visual studio code)

/*** Configuracion de usuario y correo ******/

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com


/**** RESTAURANDO ARCHIVOS**************/
git restore nombrearchivo , recuperar archivos borrados del repositorio (no tiene que haber hecho commit antes confirmando el borrado y no haber usado el comando git rm <archivo> ) tambien sirve para Restaurar un archivo modificado ejemplo: git restore main.py
Esto deshará todos los cambios hechos en main.py y lo restaurará al estado en el último commit.

git restore --staged <archivo> : Únicamente quita el archivo del área de staging. El archivo sigue siendo rastreado por Git y será incluido en futuros commits si lo añades de nuevo.

git restore . ,Si quieres restaurar todos los cambios no confirmados en tu proyecto Esto deshará todos los cambios y recuperará los archivos eliminados en el directorio de trabajo.

git checkout <commit> -- nombrearchivo , para restaurar un archivo cuando ya se ha hecho commit Aquí, <commit> puede ser un hash de commit, el nombre de una rama, o simplemente HEAD para referirse al último commit.

git restore --staged prueba4.txt
git restore prueba4.txt ambos comandos para restaurar un archivo si no se ha hecho commit confirmando el borrado y se haya usado git rm <archivo>

/*****GIT RESET
git reset nombredelarchivo.extension, comando similar a git restore --staged
git reset 979c9eca89260870978 --hard, (borra todos los cambios hasta este commit)
git reset 979c9eca89260870978 --soft, regresa a este commit pero mantiene los cambios en el staging




/**** GIT LOG**************/
git log , para ver los log y todos los commits que se han hecho 
Con barra espaciadora se pueden mostrar todos los log en caso que no los muestre y muestre los dos puntos (:), q para salir

git log --stat, comando para ver todos los cambios que se han hecho en los diferentes commits

git log --all --graph ,  Para ver de manera grafica los commits que se han realizado 

git log --all --graph --decorate --oneline, para ver de una manera mas compacta la grafica de los commits


git log -S "texto_a_buscar", comando para buscar entre los commits en que commit se uso la palabra buscada.

/**************ALIAS***********************/

alias rama="git log --all --graph --decorate --oneline" , para crear un alias donde rama es el nombre del alias y lo que esta en comillas
es el comando a asociar, luego colocar en git solo el nombre del alias para que se ejecute el comando

unalias rama, para eliminar un alias donde rama es el nombre del alias


/****** GIT CHECKOUT , moverse entre los commits*******************/

git checkout 979c9eca892608709785fa3b5936febc116b529c (me regresa a un estado anterior antes del ultimo commit)
git checkout master --> nos regresa a la rama master donde estan todos los cambios
git checkout nombrerama para moverse entre las ramas
git checkout HEAD -- prueba4.txt : Esto recuperará el archivo tal como estaba en el último commit. Se restaurará tanto en tu directorio de trabajo como en el índice de staging.




/***COMANDOS DE VIM ***************/
ESC --> :wq (para salir de vim)
Presionas i , para el modo insertar
ESC --> Shift+zz , Otra manera de salir de vim
Se pueden agregar coemntarios multilinea para los commits desde vim
:wq! para abortar el commit

presionar q (cuando se da el comando git log y aparecen dos puntos (:))

/** GIT SHOW **/
git show,  Nos muestra las diferencias que hay del commit actual al commit anterior

/** GIT DIFF
git diff 79c9eca892608709 92608709785fa3 , mostrar las diferencias entre un commit y otro



/** GIT COMMIT -A
git commit -a, esto manda directamente al staging, sin necesidad de hacer git add, es decir hace commit y add al mismo tiempo
git commit -am " descripcion del commit",  la misma funcionalidad pero este no entra a vim
git commit --amend , Este comando te permite modificar el ultimo commit esto incluye la adicion de nuevos cambios o la modificacion del mensaje del commit
git revert <commit> Este comando crea un nuevo commit que deshace los cambios en el commit especificado.


/** GIT BRANCH
git branch nombrerama, Crea una nueva rama
git checkout nombrerama, cambias de la rama principal a la nueva rama o viceversa
git branch, para ver las ramas creadas.
git branch -D nombrerama, para borrar una rama
git push origin Rama1, para hacer push a las demas ramas que no sean main y subirlas a github
git branch -r , para ver las ramas remotas.
git branch -a , para ver todas las ramas locales y remotas.
git checkout -b <branch> este comando crea una nueva rama y cambia a ella en un solo paso.
git branch -m <old_name><new_name> este comando cambia el nombre de la rama local


/** GIT MERGE
git merge nombrerama, dependiendo de adonde se quiera llevar los cambios debes de colocarte en esa rama, por ejemplo si quieres llevar los cambios hacia la rama master se debe asegurar que nos encontramos en la rama master antes de hacer el merge.

git merge Rama1 --no-edit para evitar que VIM se abra


/***********GIT HUB***********/

/****GIT REMOTE****/
git remote add origin (url del repositorio en github) , para mandar el repositorio de manera remota

git remote , para ver el repositorio remoto en el que nos encontramos.
git remote -v , para ver a que tiene acceso el origin (repositorio remoto) si al fetch o al pull
git remote remove origin, para eliminar un origin cuando se ha creado mal el repositorio remoto y da conflictos
git remote set-url --push origin (url del repositorio en github) , para cambiar a una nueva url

rm -rf .git , para eliminar un repositorio local al crearlo por error




/*******LLAVES SSH**********************/

/*** PASO 1 Crear la llave
ssh-keygen -t rsa -b 4096 -C "marioalexis.2007@gmail.com" , para crear una llave publica y privada SSH , esto es por equipo 
no por repositorio, colocarte en c/user/mario por ejemplo.

/****PASO 2 Verificar si el servicio esta encendido

eval $(ssh-agent -s) 

/****PASO 3, Añadir la base localmente
ssh-add ~/.ssh/id_rsa , debes de estar en el directorio donde estan las llaves .ssh


/*******PASO 4, Añadir la llave a Github

Irse al menu settings-> SSH and GPG Keys
luego al boton New SSH Key y ahi colocar el nombre de la llave y colocar el contenido del archivo id_rsa.pub luego dar click en Add SSH Key


/*** PASO 5 , cambiar el remote
git remote set-url origin git@github.com:mariomunoz82/Git_y_Github.git, donde la url es la obtenida del ssh del repositorio de github y es para cambiar el remote de https a ssh





/******GIT TAG******/
git tag -a nombretag -m "descripcion" codigo del commit , para agregar un TAG, se pueden visualizar especialmente en Git Hub
ejemplo: git tag -a V4.0 -m "Release de la ultima version de Git_Github" a0c5b40db9

git tag , para ver los tags que se han creado

git push origin --tags, para subir los tags creados a Github

git show-ref --tags, muestra la referencia del tag creado

git tag -d nombredelTAg , para borrar el tag de git
git push origin:refs/tags/nombredelTAg para borrar de github


IMPORTANTE!!!, Antes de crear el tag primero debes de hacer el commit con los cambios para obtener el codigo del commit
y antes de subir el tag a Github debes de hacer un push normal para subir todos los cambis, si no el tag dara un mensaje que no tiene una rama asignada.


/****AGREGAR COLABORADORES***/
Ir a los settings delrepositorio (no del usuario) luego a la opcion Collaborators y luego al boton Add people
Luego buscar el usuario que sera el colaborador de nuestro proyecto y enviar la invitacion
El nuevo colaborador debe de clonar el repositorio.


/****GITHUB PAGES*****/
Para hacer que tu repositorio sea vistos en github page:
1- Crea un repositorio en github con el siguiente formato: username.github.io
2- El repositorio debe de ser publico
3- clonar el repositorio a tu maquina local
4- añadir un archivo index.html (indispensable ya que solamente es para desarrollos web o moviles)

Si ya tienes un repositorio creado:
1- Ir a settings (del repositorio no del usuario)
2- seleccionar la opcion Pages
3-Elegir la rama que se mostrara en github pages
4- Guardar los cambios
5- el repositorio debe ser publico.

El formato de la ruta https es el siguiente: https://mariomunoz82.github.io/Git_y_Github/

/********* GIT STASH********************/

git stash , sirve para dejar los cambios en memoria si no quieres guardarlos aun y poder moverte entre las ramas ademas dejar los archivos tal cual estaban antes de hacer el stash
git stash list, sirve para ver los stash que has creado
git stash pop, sirve para regresar los cambios que no se habian guardado
git stash drop, sirve para borrar el stash que se ha hecho
git stash branch nombre rama, para mandar el stash a otra nueva rama el stash debe de estar creado previamente en la rama sobre la cual se esta trabajando (git stash)
/**** cuando mandas un stash a una nueva rama dentro de la nueva rama debes de realizar un commit guardando los cambios para que estos desaparezcan de la rama main por ejemplo o la rama donde se hizo el stash


/*******GIT CLEAN******************/

git clean --dry-run, lista cuales son los archivos que se van a borrar
git clean -f remueve los archivos listados en --dry-run
/***** clean solo funciona para archivos que no estan traqueados y que no estan en el gitignore, todo lo que este en gitignore sera ignorado y habra que borrarlo manualmente


/******PULL REQUEST***/
https://github.com/pulls?q=is%3Apr+author%3Amariomunoz82 , ruta para ver los pull request creados


/*** GIT REFLOG***/

git reflog , muestra todos los movimientos de HEAD (y otras referencias), incluso los que no aparecen en git log

Muestra todas las acciones recientes que movieron HEAD, como commit, merge, rebase, checkout, etc., incluso si no quedaron en el historial final


/*** GIT GREP***/

git grep "texto_a_buscar", comando por el cual se puede buscar en que archivos aparece determinado texto.
git grep -n "texto_a_buscar" ,  comando que indica la linea del archivo en la que aparece el texto buscado
git greap -c "texto_a_buscar" , muestra el numero de veces que aparece el texto buscado en los archivos donde se encuentra.


/***comandos adicionales**/
git shortlog, muestra todos los commits que ha hecho cada colaborador del proyecto
git shortlog -sn, muestra solamente la cantidad de commits que ha hecho cada colaborador del proyecto.
git shortlog -sn --all , muestra solamente la cantidad de commits que ha hecho cada colaborador del proyecto y los commits que fueron eliminados.
git shortlog -sn --all --no-merges, muestra la cantidad de commits que ha hecho cada colaborador del proyecto sin tomar en cuenta los merge.
git blame nombredearchivo, sirve para ver quien hizo que en el archivo seleccionado, es como un historial de todos los cambios que se hicieron.
git blame nombredearchivo -L12,24, muestra quien hizo que en las lineas que se especifican.

/******issues***/
Para cerrar issues desde git, cuando ya se ha solucionado mediante un cambio, se debe de agregar la palabra fixes y el numero del issue ejemplo:
git commit -am "cambio fixes #1"



